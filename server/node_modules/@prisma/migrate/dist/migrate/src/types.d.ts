import type { IntrospectionViewDefinition } from '@prisma/internals';
export interface RpcRequestResponse {
    id: number;
    jsonrpc: '2.0';
}
export interface RpcSuccessResponse<T> extends RpcRequestResponse {
    result: T;
}
interface RpcErrorResponse<T> extends RpcRequestResponse {
    error: T;
}
export type RpcResponse<T, E> = RpcSuccessResponse<T> | RpcErrorResponse<E>;
export interface RPCPayload extends RpcRequestResponse {
    method: string;
    params: any;
}
interface UserFacingError {
    is_panic: boolean;
    message: string;
    error_code?: string;
    meta?: unknown;
}
export type UserFacingErrorWithMeta = {
    is_panic: boolean;
    message: string;
    error_code: 'P3006';
    meta: {
        migration_name: string;
        inner_error?: {
            is_panic: boolean;
            message: string;
            backtrace: string;
        };
    };
};
export type DriftDiagnostic = {
    diagnostic: 'driftDetected';
    rollback: string;
} | {
    diagnostic: 'migrationFailedToApply';
    error: UserFacingError;
};
export type HistoryDiagnostic = {
    diagnostic: 'databaseIsBehind';
    unappliedMigrationNames: string[];
} | {
    diagnostic: 'migrationsDirectoryIsBehind';
    unpersistedMigrationNames: string[];
} | {
    diagnostic: 'historiesDiverge';
    lastCommonMigrationName: string;
    unpersistedMigrationNames: string[];
    unappliedMigrationNames: string[];
};
export interface MigrationFeedback {
    message: string;
    stepIndex: number;
}
export type DevAction = {
    tag: 'reset';
    reason: string;
} | {
    tag: 'createMigration';
};
type UrlContainer = {
    tag: 'ConnectionString';
    url: string;
};
type PathContainer = {
    tag: 'SchemaPath';
    path: string;
};
type SchemaContainer = {
    tag: 'SchemaString';
    schema: string;
};
export declare namespace EngineArgs {
    /**
     * These RPCs need a sourceConfig, therefore a db connection to function
     */
    export interface ApplyMigrationsInput {
        migrationsDirectoryPath: string;
    }
    export interface CreateMigrationInput {
        migrationsDirectoryPath: string;
        prismaSchema: string;
        draft: boolean;
        migrationName?: string;
    }
    export interface CreateDatabaseInput {
        datasource: SchemaContainer | UrlContainer | PathContainer;
    }
    export interface DropDatabase {
        schema: string;
    }
    type DbExecuteDatasourceTypeSchema = {
        tag: 'schema';
        schema: string;
    };
    type DbExecuteDatasourceTypeUrl = {
        tag: 'url';
        url: string;
    };
    export type DbExecuteDatasourceType = DbExecuteDatasourceTypeSchema | DbExecuteDatasourceTypeUrl;
    export interface DbExecuteInput {
        datasourceType: DbExecuteDatasourceType;
        script: string;
    }
    export interface GetDatabaseVersionParams {
        schema: string;
    }
    export interface IntrospectParams {
        schema: string;
        force?: Boolean;
        compositeTypeDepth?: number;
        schemas?: string[];
    }
    export interface IntrospectResult {
        datamodel: string;
        warnings: IntrospectionWarnings[];
        version: IntrospectionSchemaVersion;
        /**
         * Views retrieved from the databases.
         * Supported databases: 'postgresql'.
         *
         * This value is:
         * - `null` if "views" doesn't appear in the schema's preview features
         * - `[]` if the database doesn't have any views
         * - a non-empty array in other cases
         */
        views: IntrospectionViewDefinition[] | null;
    }
    export type IntrospectionWarnings = IntrospectionWarningsUnhandled | IntrospectionWarningsInvalidReintro | IntrospectionWarningsMissingUnique | IntrospectionWarningsEmptyFieldName | IntrospectionWarningsUnsupportedType | IntrospectionWarningsInvalidEnumName | IntrospectionWarningsCuidPrisma1 | IntrospectionWarningsUuidPrisma1 | IntrospectionWarningsFieldModelReintro | IntrospectionWarningsFieldMapReintro | IntrospectionWarningsEnumMapReintro | IntrospectionWarningsEnumValueMapReintro | IntrospectionWarningsWithoutColumns | IntrospectionWarningsCustomIndexNameReintro | IntrospectionWarningsCustomPrimaryKeyNamesReintro | IntrospectionWarningsRelationsReintro | IntrospectionWarningsTopLevelItemNameIsADupe | IntrospectionWarningsUnsupportedTypesInViews | IntrospectionWarningsEnrichedWithMapOnFieldInViews | IntrospectionWarningsEnrichedWithMapOnView | IntrospectionWarningsViewsWithoutIdentifier | IntrospectionWarningsEnrichedWithCustomPrimaryKeyNamesInViews | IntrospectionWarningsFieldsWithEmptyNamesInViews | IntrospectionWarningsPartitionedTablesFound | IntrospectionWarningsIndexNullSortFound | IntrospectionWarningsRowLevelSecurityFound | IntrospectionWarningsRowLevelTTLFound | IntrospectionWarningsDeferredConstraintFound | IntrospectionWarningCommentsFound | IntrospectionWarningsMongoMultipleTypes | IntrospectionWarningsMongoFieldsPointingToAnEmptyType | IntrospectionWarningsMongoFieldsWithUnknownTypes | IntrospectionWarningsMongoFieldsWithEmptyNames;
    type AffectedTopLevel = {
        type: 'Model' | 'Enum';
        name: string;
    };
    type AffectedModel = {
        model: string;
    };
    type AffectedModelAndConstraint = {
        model: string;
        constraint: string;
    };
    type AffectedModelAndIndex = {
        model: string;
        index_db_name: string;
    };
    type AffectedModelAndField = {
        model: string;
        field: string;
    };
    type AffectedModelAndFieldAndType = {
        model: string;
        field: string;
        tpe: string;
    };
    type AffectedModelOrCompositeTypeAndField = {
        compositeType?: string;
        model?: string;
        field: string;
    };
    type AffectedModelOrCompositeTypeAndFieldAndType = AffectedModelOrCompositeTypeAndField & {
        tpe: string;
    };
    type AffectedEnum = {
        enm: string;
    };
    type AffectedEnumAndValue = {
        enm: string;
        value: string;
    };
    type AffectedView = {
        view: string;
    };
    type AffectedViewAndField = {
        view: string;
        field: string;
    };
    type AffectedViewAndFieldAndType = {
        view: string;
        field: string;
        tpe: string;
    };
    type AffectedIndex = {
        indexName: string;
        columnName: string;
    };
    type AffectedObject = {
        type: string;
        name: string;
    };
    interface IntrospectionWarning {
        code: number;
        message: string;
        affected: AffectedTopLevel[] | AffectedModel[] | AffectedModelAndIndex[] | AffectedModelAndField[] | AffectedModelAndFieldAndType[] | AffectedModelOrCompositeTypeAndField[] | AffectedModelOrCompositeTypeAndFieldAndType[] | AffectedEnum[] | AffectedEnumAndValue[] | AffectedView[] | AffectedViewAndField[] | AffectedViewAndFieldAndType[] | AffectedIndex[] | AffectedObject[] | null;
    }
    interface IntrospectionWarningsUnhandled extends IntrospectionWarning {
        code: -1;
        affected: any;
    }
    interface IntrospectionWarningsInvalidReintro extends IntrospectionWarning {
        code: 0;
        affected: null;
    }
    interface IntrospectionWarningsMissingUnique extends IntrospectionWarning {
        code: 1;
        affected: AffectedModel[];
    }
    interface IntrospectionWarningsEmptyFieldName extends IntrospectionWarning {
        code: 2;
        affected: AffectedModelAndField[];
    }
    interface IntrospectionWarningsUnsupportedType extends IntrospectionWarning {
        code: 3;
        affected: AffectedModelAndFieldAndType[];
    }
    interface IntrospectionWarningsInvalidEnumName extends IntrospectionWarning {
        code: 4;
        affected: AffectedEnumAndValue[];
    }
    interface IntrospectionWarningsCuidPrisma1 extends IntrospectionWarning {
        code: 5;
        affected: AffectedModelAndField[];
    }
    interface IntrospectionWarningsUuidPrisma1 extends IntrospectionWarning {
        code: 6;
        affected: AffectedModelAndField[];
    }
    interface IntrospectionWarningsFieldModelReintro extends IntrospectionWarning {
        code: 7;
        affected: AffectedModel[];
    }
    interface IntrospectionWarningsFieldMapReintro extends IntrospectionWarning {
        code: 8;
        affected: AffectedModelAndField[];
    }
    interface IntrospectionWarningsEnumMapReintro extends IntrospectionWarning {
        code: 9;
        affected: AffectedEnum[];
    }
    interface IntrospectionWarningsEnumValueMapReintro extends IntrospectionWarning {
        code: 10;
        affected: AffectedEnum[];
    }
    interface IntrospectionWarningsWithoutColumns extends IntrospectionWarning {
        code: 14;
        affected: AffectedModel[];
    }
    interface IntrospectionWarningsCustomIndexNameReintro extends IntrospectionWarning {
        code: 17;
        affected: AffectedModelAndIndex[];
    }
    interface IntrospectionWarningsCustomPrimaryKeyNamesReintro extends IntrospectionWarning {
        code: 18;
        affected: AffectedModel[];
    }
    interface IntrospectionWarningsRelationsReintro extends IntrospectionWarning {
        code: 19;
        affected: AffectedModel[];
    }
    interface IntrospectionWarningsTopLevelItemNameIsADupe extends IntrospectionWarning {
        code: 20;
        affected: AffectedTopLevel[];
    }
    interface IntrospectionWarningsUnsupportedTypesInViews extends IntrospectionWarning {
        code: 21;
        affected: AffectedViewAndFieldAndType[];
    }
    interface IntrospectionWarningsEnrichedWithMapOnFieldInViews extends IntrospectionWarning {
        code: 22;
        affected: AffectedViewAndField[];
    }
    interface IntrospectionWarningsEnrichedWithMapOnView extends IntrospectionWarning {
        code: 23;
        affected: AffectedView[];
    }
    interface IntrospectionWarningsViewsWithoutIdentifier extends IntrospectionWarning {
        code: 24;
        affected: AffectedView[];
    }
    interface IntrospectionWarningsEnrichedWithCustomPrimaryKeyNamesInViews extends IntrospectionWarning {
        code: 25;
        affected: AffectedView[];
    }
    interface IntrospectionWarningsFieldsWithEmptyNamesInViews extends IntrospectionWarning {
        code: 26;
        affected: AffectedViewAndField[];
    }
    interface IntrospectionWarningsPartitionedTablesFound extends IntrospectionWarning {
        code: 27;
        affected: AffectedModel[];
    }
    interface IntrospectionWarningsIndexNullSortFound extends IntrospectionWarning {
        code: 29;
        affected: AffectedIndex[];
    }
    interface IntrospectionWarningsRowLevelSecurityFound extends IntrospectionWarning {
        code: 30;
        affected: AffectedModel[];
    }
    interface IntrospectionWarningsRowLevelTTLFound extends IntrospectionWarning {
        code: 31;
        affected: AffectedModel[];
    }
    interface IntrospectionWarningsDeferredConstraintFound extends IntrospectionWarning {
        code: 35;
        affected: AffectedModelAndConstraint[];
    }
    interface IntrospectionWarningCommentsFound extends IntrospectionWarning {
        code: 36;
        affected: AffectedObject[];
    }
    interface IntrospectionWarningsMongoMultipleTypes extends IntrospectionWarning {
        code: 101;
        affected: AffectedModelOrCompositeTypeAndFieldAndType[];
    }
    interface IntrospectionWarningsMongoFieldsPointingToAnEmptyType extends IntrospectionWarning {
        code: 102;
        affected: AffectedModelOrCompositeTypeAndField[];
    }
    interface IntrospectionWarningsMongoFieldsWithUnknownTypes extends IntrospectionWarning {
        code: 103;
        affected: AffectedModelOrCompositeTypeAndField[];
    }
    interface IntrospectionWarningsMongoFieldsWithEmptyNames extends IntrospectionWarning {
        code: 104;
        affected: AffectedModelOrCompositeTypeAndField[];
    }
    export type ViewWarningCodes = IntrospectionWarningsUnsupportedTypesInViews['code'] | IntrospectionWarningsEnrichedWithMapOnFieldInViews['code'] | IntrospectionWarningsEnrichedWithMapOnView['code'] | IntrospectionWarningsViewsWithoutIdentifier['code'] | IntrospectionWarningsEnrichedWithCustomPrimaryKeyNamesInViews['code'] | IntrospectionWarningsFieldsWithEmptyNamesInViews['code'];
    export type IntrospectionSchemaVersion = 'Prisma2' | 'Prisma1' | 'Prisma11' | 'NonPrisma';
    export interface DevDiagnosticInput {
        migrationsDirectoryPath: string;
    }
    export interface DiagnoseMigrationHistoryInput {
        migrationsDirectoryPath: string;
        optInToShadowDatabase: boolean;
    }
    export interface EnsureConnectionValidityInput {
        datasource: SchemaContainer | UrlContainer | PathContainer;
    }
    export interface EvaluateDataLossInput {
        migrationsDirectoryPath: string;
        prismaSchema: string;
    }
    export interface ListMigrationDirectoriesInput {
        migrationsDirectoryPath: string;
    }
    export interface MarkMigrationAppliedInput {
        migrationsDirectoryPath: string;
        migrationName: string;
    }
    export interface MarkMigrationRolledBackInput {
        migrationName: string;
    }
    type MigrateDiffTargetUrl = {
        tag: 'url';
        url: string;
    };
    type MigrateDiffTargetEmpty = {
        tag: 'empty';
    };
    type MigrateDiffTargetSchemaDatamodel = {
        tag: 'schemaDatamodel';
        schema: string;
    };
    type MigrateDiffTargetSchemaDatasource = {
        tag: 'schemaDatasource';
        schema: string;
    };
    type MigrateDiffTargetMigrations = {
        tag: 'migrations';
        path: string;
    };
    export type MigrateDiffTarget = MigrateDiffTargetUrl | MigrateDiffTargetEmpty | MigrateDiffTargetSchemaDatamodel | MigrateDiffTargetSchemaDatasource | MigrateDiffTargetMigrations;
    export interface MigrateDiffInput {
        from: MigrateDiffTarget;
        to: MigrateDiffTarget;
        script: boolean;
        shadowDatabaseUrl?: string;
        exitCode?: boolean;
    }
    export interface SchemaPush {
        schema: string;
        force: boolean;
    }
    export {};
}
export declare namespace EngineResults {
    interface ApplyMigrationsOutput {
        appliedMigrationNames: string[];
    }
    interface CreateDatabaseOutput {
        database_name: string;
    }
    interface CreateMigrationOutput {
        generatedMigrationName: string | null;
    }
    interface DbExecuteOutput {
    }
    interface DevDiagnosticOutput {
        action: DevAction;
    }
    interface DiagnoseMigrationHistoryOutput {
        history: HistoryDiagnostic | null;
        failedMigrationNames: string[];
        editedMigrationNames: string[];
        hasMigrationsTable: boolean;
    }
    interface EvaluateDataLossOutput {
        migrationSteps: number;
        warnings: MigrationFeedback[];
        unexecutableSteps: MigrationFeedback[];
    }
    interface ListMigrationDirectoriesOutput {
        migrations: string[];
    }
    enum MigrateDiffExitCode {
        SUCCESS = 0,
        ERROR = 1,
        SUCCESS_NONEMPTY = 2
    }
    interface MigrateDiffOutput {
        exitCode: MigrateDiffExitCode;
    }
    interface SchemaPush {
        executedSteps: number;
        warnings: string[];
        unexecutable: string[];
    }
}
export interface FileMap {
    [fileName: string]: string;
}
export interface Dictionary<T> {
    [key: string]: T;
}
export {};
